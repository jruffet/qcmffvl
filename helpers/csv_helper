#!/usr/bin/env python3
import argparse
import csv
import sys
import re
from typing import List, Dict, Optional

DO_NOT_FORMAT = ["P12BM", "A66M", "S109V", "S110V", "S132B", "S60M", "S69M"]
CSV_HEADER = [
    "code",
    "question",
    "ans1",
    "pts1",
    "ans2",
    "pts2",
    "ans3",
    "pts3",
    "ans4",
    "pts4",
    "ans5",
    "pts5",
]
CATEGORIES = {
    "A": "Météo",
    "E": "Mécavol",
    "F": "Facteurs humains",
    "G": "Mécavol",
    "H": "Mécavol",
    "L": "Matériel",
    "N": "Matériel",
    "P": "Milieu naturel",
    "R": "Matériel",
    "S": "Réglementation",
    "U": "Pilotage",
    "W": "Pilotage",
    "X": "Pilotage",
}
PRATIQUES = {
    "global": ["A", "S", "F", "P", "E", "L", "U"],
    "parapente": ["G", "N", "W"],
    "delta": ["H", "R", "X"],
}
NIVEAUX = {
    "V": "BI",
    "B": "BP",
    "M": "BPC",
    "T": "Treuil",
}


def info(s: str):
    print(f"[+] {s}")


def parse_args():
    parser = argparse.ArgumentParser(prog="csv_helper")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # check command
    check_parser = subparsers.add_parser("check", help="Check the CSV file for inconsistencies")
    check_parser.add_argument("filename", help="CSV file to check")

    # format command
    format_parser = subparsers.add_parser("format", help="Format the CSV file")
    format_parser.add_argument("filename", help="CSV file to format")
    # group = format_parser.add_mutually_exclusive_group()
    # group.add_argument('--capitalize', action='store_true', help='Capitalize first word of answers')
    # group.add_argument('--lowercase', action='store_true', help='Lowercase first word of answers')

    # stats command
    stats_parser = subparsers.add_parser("stats", help="Show statistics about the CSV file")
    stats_parser.add_argument("filename", help="CSV file to analyze")

    # diff command
    diff_parser = subparsers.add_parser("diff", help="Compare two CSV files")
    diff_parser.add_argument("file1", help="First CSV file")
    diff_parser.add_argument("file2", help="Second CSV file")
    diff_parser.add_argument(
        "--points", action="store_true", help="Output questions where points have changed"
    )

    return parser.parse_args()


def get_question(rows: List[Dict], code: str) -> Dict:
    for row in rows:
        if row["code"] == code:
            return row
    return {}


def csv_bogus_max_points(rows: List[Dict]) -> List[Dict]:
    bad_rows = []
    for row in rows:
        max_points = sum(int(v) for k, v in row.items() if "pts" in k and int(v) > 0)
        if max_points < 6:
            bad_rows.append(row)
    return bad_rows


def csv_duplicate_rows(rows: List[Dict]) -> List[Dict]:
    seen = set()
    duplicates = set()
    for row in rows:
        code = row["code"]
        if code in seen:
            duplicates.add(code)
        seen.add(code)
    return [x for x in rows if x["code"] in duplicates]


def csv_check(rows: List[Dict]):
    ret = True

    info("Questions with max_points < 6")
    bogus = csv_bogus_max_points(rows)
    if bogus:
        ret = False
        write_csv_to_stdout(bogus)

    info("Questions with duplicate codes")
    duplicates = csv_duplicate_rows(rows)
    if duplicates:
        ret = False
        write_csv_to_stdout(duplicates)

    return ret


def format_first_word(s: str, capitalize: bool = False, lowercase: bool = False):
    if not s or " " not in s:
        return s
    parts = s.split(" ", 1)

    if lowercase:
        parts[0] = parts[0].lower()
    elif capitalize:
        parts[0] = parts[0].capitalize()
    return " ".join(parts)


def string_format(s: str) -> str:
    ret = s.rstrip()
    ret = ret.replace("’", "'")
    return ret


def csv_format(rows: List[Dict]):
    for row in rows:
        if row["code"] not in DO_NOT_FORMAT:
            row["question"] = string_format(row["question"])
            for i in range(1, 6):
                key = f"ans{i}"
                if key in row:
                    if row["question"].endswith("?"):
                        row[key] = format_first_word(row[key], capitalize=True)
                    else:
                        row[key] = format_first_word(row[key], lowercase=True)
                    row[key] = string_format(row[key].rstrip())
    write_csv_to_stdout(rows)


def stats_to_csv(stats: Dict[str, Dict[str, Dict[str, int]]]) -> List[Dict[str, int]]:
    rows = []
    for pratique, levels in stats.items():
        for level, categories in levels.items():
            row = {"Pratique": pratique, "Brevet": level}
            row.update(categories)
            rows.append(row)
    return rows


def csv_stats(rows: List[Dict]):
    catlist = sorted(set(CATEGORIES.values()))
    header = ["Pratique", "Brevet"] + catlist

    stats = {"Parapente": {}, "Delta": {}}
    for s in stats:
        for level in NIVEAUX.values():
            stats[s][level] = {}
            for cat in catlist:
                stats[s][level][cat] = 0

    for row in rows:
        cat_letter = row["code"][0]
        cat = CATEGORIES[cat_letter]
        level_letters = re.fullmatch(r"\w+\d+(\w+)", row["code"]).groups()[0]
        pratiques = []
        if cat_letter in PRATIQUES["global"] or cat_letter in PRATIQUES["parapente"]:
            pratiques.append("Parapente")
        if cat_letter in PRATIQUES["global"] or cat_letter in PRATIQUES["delta"]:
            pratiques.append("Delta")
        for pratique in pratiques:
            for letter in level_letters:
                level = NIVEAUX[letter]
                stats[pratique][level][cat] += 1

    write_csv_to_stdout(stats_to_csv(stats), header)


def csv_diff(rows1: List[Dict], rows2: List[Dict], check_points: bool):
    duplicate_codes = set([x["code"] for x in csv_duplicate_rows(rows1)])
    if check_points:
        rows2_codes = [x["code"] for x in rows2]
        for row1 in rows1:
            if row1["code"] in rows2_codes and row1["code"] not in duplicate_codes:
                row2 = get_question(rows2, row1["code"])
                for i in range(1, 6):
                    ans = f"ans{i}"
                    pts = f"pts{i}"
                    if ans in row1 and ans in row2:
                        if row1[pts] != row2[pts]:
                            write_csv_to_stdout([row1, row2])
                            print()
                            break


def load_csv(filename: str) -> List[Dict]:
    with open(filename, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f, fieldnames=CSV_HEADER)
        rows = []
        # remove empty answers+points
        for row in reader:
            cleaned = {k: v for k, v in row.items() if v != ""}
            rows.append(cleaned)
        return rows


def write_csv_to_stdout(rows: List[Dict], header: Optional[List[str]] = None):
    fieldnames = header if header else CSV_HEADER
    writer = csv.DictWriter(sys.stdout, fieldnames=fieldnames, lineterminator="\n")

    writer.writeheader()
    for row in rows:
        writer.writerow(row)


def main():
    args = parse_args()

    if args.command == "diff":
        csv_diff(load_csv(args.file1), load_csv(args.file2), check_points=args.points)
    else:
        csv_content = load_csv(args.filename)
        if args.command == "check":
            ret = csv_check(csv_content)
            # used in CI
            sys.exit(not ret)
        elif args.command == "format":
            csv_format(csv_content)
        elif args.command == "stats":
            csv_stats(csv_content)


if __name__ == "__main__":
    main()
